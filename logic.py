import logging
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
import telebot
from config import *
bot = telebot.TeleBot(Token)

questions = [
    {
        "question": "–ö–∞–∫–æ–π —Ç–∏–ø –∑–∞–¥–∞—á –≤–∞–º –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è?",
        "options": ["–¢–≤–æ—Ä—á–µ—Å–∫–∏–µ", "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ", "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ"]
    },
    {
        "question": "–ö–∞–∫—É—é —Å—Ä–µ–¥—É –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?",
        "options": ["–û—Ñ–∏—Å", "–ù–∞ —É–ª–∏—Ü–µ", "–î–æ–º–∞", "–í –∫–æ–º–∞–Ω–¥–µ"]
    },
    {
        "question": "–ß—Ç–æ –≤–∞–º –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?",
        "options": ["–ù–∞—É–∫–∞", "–ò—Å–∫—É—Å—Å—Ç–≤–æ", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–ë–∏–∑–Ω–µ—Å"]
    }
]

user_answers = {}

def create_db():
    conn = sqlite3.connect('career_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS professions (
            id INTEGER PRIMARY KEY,
            name TEXT,
            description TEXT,
            skills TEXT,
            resources TEXT,
            prospects TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            chat_id INTEGER,
            interests TEXT,
            skills TEXT
        )
    ''')
    conn.commit()
    conn.close()

@bot.message_handler(func=lambda message: True)
def handle_interests(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()  

    user_interest = query.data  
    chat_id = query.message.chat.id
    
    conn = sqlite3.connect('career_bot.db')
    cursor = conn.cursor()
    cursor.execute('INSERT OR REPLACE INTO users (chat_id, interests) VALUES (?, ?)', (chat_id, user_interest))
    conn.commit()
    conn.close()

    query.edit_message_text(text="–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤. –°–µ–π—á–∞—Å –ø—Ä–∏—à–ª–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç!‚úîÔ∏è")
    recommend_professions(chat_id)

def recommend_professions(chat_id: int) -> None:
    conn = sqlite3.connect('career_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT interests FROM users WHERE chat_id = ?', (chat_id,))
    interests = cursor.fetchone()
    
    if interests:
        interests = interests[0]
        cursor.execute('SELECT * FROM professions WHERE name = ?', (interests,))
        professions = cursor.fetchall()
        
        if professions:
            response = "–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π/—Å—Ñ–µ—Ä, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ç–µ–±—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å –∏ –∏–∑–º–µ–Ω—è—Ç —Ç–≤–æ—é –∂–∏–∑–Ω—å —Ä–∞–∑ –∏ –Ω–∞–≤—Å–µ–≥–¥–∞:\n"
            for prof in professions:
                response += f"{prof[1]}: {prof[2]}\n"  
            CallbackContext.bot.send_message(chat_id=chat_id, text=response)
        else:
            CallbackContext.bot.send_message(chat_id=chat_id, text="–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π.üò± –ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—èüò≠")
    
    conn.close()

